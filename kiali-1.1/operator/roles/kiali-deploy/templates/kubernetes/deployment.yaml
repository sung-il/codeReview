apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: {{ kiali_vars.deployment.namespace }}
  labels:
    app: kiali
    version: {{ kiali_vars.deployment.version_label }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
      version: {{ kiali_vars.deployment.version_label }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      name: kiali
      labels:
        app: kiali
        version: {{ kiali_vars.deployment.version_label }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ kiali_vars.server.metrics_port }}"
        kiali.io/runtimes: go,kiali
    spec:
      serviceAccount: kiali-service-account
      containers:
      - image: {{ kiali_vars.deployment.image_name }}:{{ kiali_vars.deployment.image_version }}
        imagePullPolicy: {{ kiali_vars.deployment.image_pull_policy }}
        name: kiali
        command:
        - "/opt/kiali/kiali"
        - "-config"
        - "/kiali-configuration/config.yaml"
        - "-v"
        - "{{ kiali_vars.deployment.verbose_mode }}"
        ports:
          - name: api-port
            containerPort: {{ kiali_vars.server.port }}
        readinessProbe:
          httpGet:
            path: {{ kiali_vars.server.web_root | regex_replace('\\/$', '') }}/healthz
            port: api-port
            scheme:  {{ 'HTTP' if kiali_vars.identity.cert_file == "" else 'HTTPS' }}
          initialDelaySeconds: 5
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: {{ kiali_vars.server.web_root | regex_replace('\\/$', '') }}/healthz
            port: api-port
            scheme:  {{ 'HTTP' if kiali_vars.identity.cert_file == "" else 'HTTPS' }}
          initialDelaySeconds: 5
          periodSeconds: 30
        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: kiali-configuration
          mountPath: "/kiali-configuration"
        - name: kiali-cert
          mountPath: "/kiali-cert"
        - name: kiali-secret
          mountPath: "/kiali-secret"
      volumes:
      - name: kiali-configuration
        configMap:
          name: kiali
      - name: kiali-cert
        secret:
          secretName: istio.kiali-service-account
      - name: kiali-secret
        secret:
          secretName: kiali
          optional: true
