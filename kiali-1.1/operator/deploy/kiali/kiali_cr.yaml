apiVersion: kiali.io/v1alpha1
kind: Kiali
metadata:
  name: kiali
annotations:
  ansible.operator-sdk/reconcile-period: "0s"
spec:

###################################################################
# kiali_cr.yaml
#
# This is a fully documented Kiali custom resource yaml file.
# It can be used to tell the Kiali Operator to install Kiali.
#
# This is actually an empty Kiali CR, however, it provides
# documentation on all available settings.
# In each documented section, you will see a "---" marker;
# below that marker you will see the names of the settings along
# with their default values. If the setting is not defined by
# default, its name will be prefixed with "#".
###################################################################

##########
# Tag used to identify a particular instance/installation of the Kiali server.
#    ---
#  installation_tag: ""

##########
# The namespace where Istio is installed. If left empty, it is assumed to be the
# same namespace as where Kiali is installed (i.e. deployment.namespace).
#    ---
#  istio_namespace: ""

##########
#  ---
#  api:
#
# Allows for controlling what namespaces/projects are returned by Kiali.
#
# 'exclude' is optional takes an list of namespace/projects to be excluded from the list
# of namespaces provided by the API and UI. Regex is supported. This does not affect
# explicit namespace access.
#
# 'label_selector' is optional and takes a string value of a Kubernetes label selector
# (e.g. "myLabel=myValue") which is used when fetching the list of available namespaces.
# This does not affect explicit namespace access.
# Note that if you do not set this but deployment.accessible_namespaces does not have the
# special "all namespaces" value of "**" then this label_selector will be set
# to a default value of "kiali.io/member-of=<deployment.namespace>" where
# <deployment.namespace> is the namespace where Kiali is to be installed.
# If deployment.accessible_namespaces does not have the special value of "**"
# then the Kiali operator will add a new label to all accessible namespaces - that new
# label will be this label_selector.
#
#    ---
#    namespaces:
#      exclude:
#      - "istio-operator"
#      - "kube.*"
#      - "openshift.*"
#      - "ibm.*"
#      - "kiali-operator"
#      #label_selector:

##########
#  ---
#  auth:
#
# Determines what authentication strategy to use when users log into Kiali.
# Options are "login", "anonymous", "openshift".
# Choose "login" to use a username and password that will be stored in a secret.
# Choose "anonymous" to allow full access to Kiali without requiring any credentials.
# Choose "openshift" to use the OpenShift OAuth login which controls access based on
# the individual's  RBAC roles in OpenShift. Not valid for non-OpenShift environments.
# When empty, its value will default to "openshift" on OpenShift and "login" on Kubernetes.
#    ---
#    strategy: ""

##########
#  ---
#  deployment:
#
# A list of namespaces Kiali is to be given access to.
# These namespaces have service mesh components that are to be observed by Kiali.
# You can provide names using regex expressions matched against all namespaces the operator can see.
# The default makes all namespaces accessible except for some internal namespaces that typically should be ignored.
# NOTE! If this has an entry with the special value of "**" (two asterisks), that will denote you want
# Kiali to be given access to all namespaces via a single cluster role (if using this special value of "**",
# you are required to have already granted the operator permissions to create cluster roles and cluster role bindings).
#    ---
#    accessible_namespaces: ["^((?!(istio-operator|kube.*|openshift.*|ibm.*|kiali-operator)).)*$"]
#
# Additional custom yaml to add to the service definition. This is used mainly to customize the service type.
# For example, if the deployment.service_type is set to "LoadBalancer" and you want to set the loadBalancerIP,
# you can do so here with: additional_service_yaml: { "loadBalancerIP": "78.11.24.19" }.
# Another example would be if the deployment.service_type is set to "ExternalName" you will need to configure
# the name via: additional_service_yaml: { "externalName": "my.kiali.example.com" }.
# A final example would be if external IPs need to be set: additional_service_yaml: { "externalIPs": ["80.11.12.10"] }
#    ---
#    #additional_service_yaml:
#
# Determines which Kiali image to download and install.
#    ---
#    image_name: "kiali/kiali"
#
# The Kubernetes pull policy for the Kiali deployment.
# This is overridden to be "Always" if image_version is set to "latest".
#    ---
#    image_pull_policy: "IfNotPresent"
#
# Determines which version of Kiali to install.
# Choose "lastrelease" to use the last Kiali release.
# Choose "latest" to use the latest image (which may or may not be a released version of Kiali).
# Otherwise, you can set this to any valid Kiali version (such as "v0.12").
# Note that if this is set to "latest" then the image_pull_policy will be "Always".
#    ---
#    image_version: "lastrelease"
#
# Determines if the Kiali endpoint should be exposed externally.
# If true, an Ingress will be created if on Kubernetes or a Route if on OpenShift.
#    ---
#    ingress_enabled: true
#
# The namespace into which Kiali is to be installed.
#    ---
#    namespace: "istio-system"
#
# The name of the secret where the Kiali credentials are found.
# These credentials will be required when logging into Kiali.
# Only used when auth_strategy is "login".
#    ---
#    secret_name: "kiali"
#
# The Kiali service type. Kubernetes determines what values are valid.
# Common values are "NodePort", "ClusterIP", and "LoadBalancer".
#    ---
#    service_type: "NodePort"
#
# Determines which priority levels of log messages Kiali will output.
# Typical values are "3" for INFO and higher priority, "4" for DEBUG and higher priority.
#    ---
#    verbose_mode: "3"
#
# Kiali resources will be assigned a "version" label when they are deployed.
# This determines what value those "version" labels will have.
# When empty, its default will be determined as follows:
#   If image_version is "latest", version_label will be fixed to "master".
#   If image_version is "lastrelease", version_label will be fixed to
#   the last Kiali release version string.
#   If the image_version is anything else, version_label will be that value, too.
#    ---
#    version_label: ""
#
# When true, Kiali will be in "view only" mode, allowing the user to view and retrieve
# management and monitoring data for the service mesh, but not allow the user to
# modify the service mesh.
#    ---
#    view_only_mode: false

##########
#  ---
#  external_services:
#
# **Grafana-specific settings:
# auth: authentication settings to connect to Grafana:
#   ca_file: The certificate authority file to use when accessing Grafana using https. An empty string means no extra
#       certificate authority file is used. Default is an empty string.
#   insecure_skip_verify: Set true to skip verifying certificate validity when Kiali contacts Grafana over https.
#   password: Password to be used when making requests to Grafana, for basic authentication. User only requires viewer permissions.
#   token: Token / API key to access Grafana, for token-based authentication. It only requires viewer permissions.
#   type: The type of authentication to use when contacting the server from the Kiali backend. Use "bearer" to send the
#       token to the Prometheus server. Use "basic" to connect with username and password credentials. Use "none" to not use any authentication.
#       Default is "none"
#   use_kiali_token: When true and if auth.type is "bearer", the same OAuth token used for authentication in Kiali will be used for the API calls to Grafana,
#       and auth.token config is ignored then.
#   username: Username to be used when making requests to Grafana, for basic authentication. User only requires viewer permissions.
# enabled: When true, Grafana support will be enabled in Kiali.
# in_cluster_url: Set URL for in-cluster access. Example: "http://grafana.istio-system:3000".
# url: The URL that Kiali uses when integrating with Grafana. This URL must be accessible to clients external to
#      the cluster in order for the integration to work properly. If empty, an attempt to auto-discover it is made.
#    ---
#    grafana:
#      auth:
#        ca_file: ""
#        insecure_skip_verify: false
#        password: ""
#        token: ""
#        type: "none"
#        use_kiali_token: false
#        username: ""
#      enabled: true
#      in_cluster_url: "http://grafana.istio-system:3000"
#      url: ""
#
# **Istio-specific settings:
# istio_identity_domain: The annotation used by Istio to identify domains.
# istio_sidecar_annotation: The pod annotation used by Istio to identify the sidecar.
# url_service_version: The Istio service used to determine the Istio version.
#                      If empty, assumes it is in the istio namespace at the URL "http://istio-pilot.<istio_namespace>:8080/version"
#    ---
#    istio:
#      istio_identity_domain: "svc.cluster.local"
#      istio_sidecar_annotation: "sidecar.istio.io/status"
#      url_service_version: ""
#
#
# **Prometheus-specific settings:
# auth: authentication settings to connect to Prometheus:
#   ca_file: The certificate authority file to use when accessing Prometheus using https. An empty string means no extra
#       certificate authority file is used. Default is an empty string.
#   insecure_skip_verify: Set true to skip verifying certificate validity when Kiali contacts Prometheus over https.
#   password: Password to be used when making requests to Prometheus, for basic authentication.
#   token: Token / API key to access Prometheus, for token-based authentication.
#   type: The type of authentication to use when contacting the server from the Kiali backend. Use "bearer" to send the
#       token to the Prometheus server. Use "basic" to connect with username and password credentials. Use "none" to not use any authentication.
#       Default is "none"
#   use_kiali_token: When true and if auth.type is "bearer", Kiali Service Account token will be used for the API calls to Prometheus,
#       and auth.token config is ignored then.
#   username: Username to be used when making requests to Prometheus, for basic authentication.
# custom_metrics_url: The URL used to query the Prometheus Server for building the runtime metrics dashboards.
#                     This URL must be accessible from the Kiali pod.
#                     If empty, assumes it is in the istio namespace at the URL "http://prometheus.<istio_namespace>:9090"
# url: The URL used to query the Prometheus Server. This URL must be accessible from the Kiali pod.
#      If empty, assumes it is in the istio namespace at the URL "http://prometheus.<istio_namespace>:9090"
#    ---
#    prometheus:
#      auth:
#        ca_file: ""
#        insecure_skip_verify: false
#        password: ""
#        token: ""
#        type: "none"
#        use_kiali_token: false
#        username: ""
#      custom_metrics_url: ""
#      url: ""
#
# **Tracing-specific settings:
#  - Right now we only support Jaeger
# auth: authentication settings to connect to Jaeger:
#   ca_file: The certificate authority file to use when accessing Jaeger using https. An empty string means no extra
#       certificate authority file is used. Default is an empty string.
#   insecure_skip_verify: Set true to skip verifying certificate validity when Kiali contacts Jaeger over https.
#   password: Password to be used when making requests to Jaeger, for basic authentication. User only requires viewer permissions.
#   token: Token / API key to access Jaeger, for token-based authentication. It only requires viewer permissions.
#   type: The type of authentication to use when contacting the server from the Kiali backend. Use "bearer" to send the
#       token to the Prometheus server. Use "basic" to connect with username and password credentials. Use "none" to not use any authentication.
#       Default is "none"
#   use_kiali_token: When true and if auth.type is "bearer", the same OAuth token used for authentication in Kiali will be used for the API calls to Grafana,
#       and auth.token config is ignored then.
#   username: Username to be used when making requests to Jaeger, for basic authentication. User only requires viewer permissions.
# enabled: When true, Kiali shows Jaeger and will attempt to autodiscover it.
# namespace: The Kubernetes namespace that holds the Tracing service (if empty, assumes the same value as deployment.namespace)
# service: The Kubernetes service name for tracing. Kiali uses this to connect within the cluster to Jaeger.
# url: The URL that Kiali uses when integrating with Tracing. This URL must be accessible to clients external to
#      the cluster in order for the integration to work properly. If empty, an attempt to auto-discover it is made.
#      If tracing service is deployed in a QUERY_BASE_PATH set this in the url like https://<hostname>/<QUERY_BASE_PATH> . EX: https://tracing-service:8080/jaeger
#    ---
#    tracing:
#      auth:
#        ca_file: ""
#        insecure_skip_verify: false
#        password: ""
#        token: ""
#        type: "none"
#        use_kiali_token: false
#        username: ""
#      enabled: true
#      namespace: ""
#      service : ""
#      url: ""

##########
#  ---
#  identity:
#
# Certificate file used to identify the file server. If set, you must go over https to access Kiali.
# The operator will set these if it deploys Kiali behind https.
# When left undefined, the operator will assign a cluster-specific cert file to provide https by default.
# When set to an empty string, https will be disabled.
#    ---
#    #cert_file:
#
# Private key file used to identify the server. If set, you must go over https to access Kiali.
# When left undefined, the operator will assign a cluster-specific private key file to provide https by default.
# When set to an empty string, https will be disabled.
#    ---
#    #private_key_file:

##########
#  ---
#  istio_labels:
#
# This section defines what labels Istio is using to indicate apps and versions.
# Typical values are: ("app" and "version") or ("app.kubernetes.io/name" and "app.kubernetes.io/version").
# Kiali needs to know what labels Istio is using to be in sync with what Istio considers applications.
#    ---
#    app_label_name: "app"
#    version_label_name: "version"

##########
#  ---
#  kubernetes_config:
#
# The Burst value of the Kubernetes client.
#    ---
#    burst: 200
#
# The QPS value of the Kubernetes client.
#    ---
#    qps: 175
#
# Flag to use a Kubernetes cache for watching changes and updating pods and controllers data asynchronously.
# Caution: Kubernetes cache is not compatible with reduced permissions scenearios.
#    ---
#    cache_enabled: false
#
# The ratio interval (expressed in nanoseconds) used for the cache to perform a full refresh.
# Only used when cache_enabled is true.
#    ---
#    cache_duration: 300000000

##########
#  ---
#  login_token:
#
# The signing key used to generate tokens for user authentication.
#    ---
#    signing_key: "kiali"
#
# The token expiration in seconds.
#    ---
#    expiration_seconds: 86400

##########
#  ---
#  server:
#
# Where the Kiali server is bound. The console and API server are accessible on this host.
#    ---
#    address: ""
#
# When true, allows additional audit logging on write operations.
#    ---
#    audit_log: true
#
# When true, allows the web console to send requests to other domains other than where the console came from.
# Typically used for development environments only.
#    ---
#    cors_allow_all: false
#
# When true, the metrics endpoint will be available for Prometheus to scrape.
#    ---
#    metrics_enabled: true
#
# The port that the server will bind to in order to receive metric requests.
# This is the port Prometheus will need to scrape when collecting metrics from Kiali.
#    ---
#    metrics_port: 9090
#
# The port that the server will bind to in order to receive console and API requests.
#    ---
#    port: 20001
#
# Defines the context root path for the Kiali console and API endpoints and readiness probes.
# When providing a context root path that is not "/", do not add a trailing slash.
# For example, use "/kiali" not "/kiali/".
# When empty, will default to "/" on OpenShift and "/kiali" on Kubernetes.
#    ---
#    web_root: ""

